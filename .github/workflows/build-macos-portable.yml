name: Build macOS Portable Binary

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'main'
        type: string
      build_type:
        description: 'Build configuration'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug
      create_dmg:
        description: 'Create DMG package'
        required: true
        default: true
        type: boolean
      code_sign:
        description: 'Code sign the application (requires secrets)'
        required: true
        default: false
        type: boolean

env:
  QT_VERSION: '6.5.0'
  CMAKE_BUILD_TYPE: ${{ inputs.build_type }}

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch }}
        fetch-depth: 0
    
    - name: Get build info
      id: build_info
      run: |
        echo "git_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "git_branch=${{ inputs.branch }}" >> $GITHUB_OUTPUT
        echo "build_date=$(date '+%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT
        echo "app_name=DroidStar_${{ inputs.branch }}_$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{ env.QT_VERSION }}
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        modules: 'qtmultimedia qtserialport'
        cache: true
    
    - name: Install dependencies via Homebrew
      run: |
        # Update Homebrew and install dependencies
        brew update
        brew install cmake rtmidi pkg-config
        
        # Verify installations
        echo "=== Installed versions ==="
        cmake --version
        pkg-config --modversion rtmidi
        echo "Qt version: ${{ env.QT_VERSION }}"
        echo "Qt location: ${{ env.Qt6_DIR }}"
    
    - name: Configure build environment
      run: |
        # Set up ARM64 build (modern Macs, matches Homebrew architecture)
        echo "CMAKE_OSX_ARCHITECTURES=arm64" >> $GITHUB_ENV
        echo "CMAKE_OSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
        
        # Add Qt to PATH
        echo "${{ env.Qt6_DIR }}/bin" >> $GITHUB_PATH
        
        # Verify Qt tools
        which qmake6 || which qmake
        which macdeployqt
    
    - name: Create build directory
      run: |
        mkdir -p build
        cd build
        echo "Build directory created in: $(pwd)"
    
    - name: Configure with CMake
      working-directory: build
      run: |
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
          -DCMAKE_OSX_ARCHITECTURES="${{ env.CMAKE_OSX_ARCHITECTURES }}" \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ env.CMAKE_OSX_DEPLOYMENT_TARGET }} \
          -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}" \
          -DENABLE_MIDI=ON \
          -DCMAKE_VERBOSE_MAKEFILE=ON
    
    - name: Build application
      working-directory: build
      run: |
        echo "=== Starting build ==="
        make -j$(sysctl -n hw.ncpu) VERBOSE=1
        
        echo "=== Build completed ==="
        ls -la DroidStar.app/Contents/MacOS/
        
        echo "=== Checking binary architecture ==="
        file DroidStar.app/Contents/MacOS/DroidStar
        lipo -info DroidStar.app/Contents/MacOS/DroidStar || echo "lipo info failed"
    
    - name: Verify dependencies before deployment
      working-directory: build
      run: |
        echo "=== Pre-deployment dependency check ==="
        otool -L DroidStar.app/Contents/MacOS/DroidStar | head -15
        
        echo "=== App bundle structure ==="
        find DroidStar.app -type f -name "*.dylib" | head -10 || echo "No dylibs found yet"
    
    - name: Create portable app bundle
      working-directory: build
      run: |
        echo "=== Creating portable app bundle ==="
        cp -r DroidStar.app "${{ steps.build_info.outputs.app_name }}.app"
        
        echo "=== Deploying Qt frameworks and dependencies ==="
        if [ "${{ inputs.code_sign }}" = "true" ] && [ -n "${{ secrets.DEVELOPER_ID_APPLICATION }}" ]; then
          echo "Code signing enabled"
          macdeployqt "${{ steps.build_info.outputs.app_name }}.app" \
            -codesign="${{ secrets.DEVELOPER_ID_APPLICATION }}" \
            -verbose=2
        else
          echo "Building without code signing"
          macdeployqt "${{ steps.build_info.outputs.app_name }}.app" \
            -verbose=2
        fi
    
    - name: Verify portable app
      working-directory: build
      run: |
        echo "=== Post-deployment verification ==="
        echo "App size: $(du -sh ${{ steps.build_info.outputs.app_name }}.app)"
        
        echo "=== Checking bundled frameworks ==="
        ls -la "${{ steps.build_info.outputs.app_name }}.app/Contents/Frameworks/" | head -10
        
        echo "=== Final dependency check ==="
        otool -L "${{ steps.build_info.outputs.app_name }}.app/Contents/MacOS/DroidStar" | head -15
        
        echo "=== Verifying architecture of deployed app ==="
        file "${{ steps.build_info.outputs.app_name }}.app/Contents/MacOS/DroidStar"
        lipo -info "${{ steps.build_info.outputs.app_name }}.app/Contents/MacOS/DroidStar" || echo "lipo failed"
        
        echo "=== Checking app bundle structure ==="
        echo "Info.plist exists: $(test -f "${{ steps.build_info.outputs.app_name }}.app/Contents/Info.plist" && echo "YES" || echo "NO")"
        echo "Executable exists: $(test -f "${{ steps.build_info.outputs.app_name }}.app/Contents/MacOS/DroidStar" && echo "YES" || echo "NO")"
        echo "Frameworks bundled: $(ls "${{ steps.build_info.outputs.app_name }}.app/Contents/Frameworks/" | wc -l) items"
        
        echo "=== Bundle verification (CI-safe) ==="
        # Verify app bundle is properly structured and deployable without GUI launch
        if [ -f "${{ steps.build_info.outputs.app_name }}.app/Contents/MacOS/DroidStar" ]; then
          echo "✅ Main executable exists"
          
          # Check if dependencies are properly bundled
          if otool -L "${{ steps.build_info.outputs.app_name }}.app/Contents/MacOS/DroidStar" | grep -q "@executable_path"; then
            echo "✅ App appears to be properly deployed with bundled dependencies"
          else
            echo "⚠️ Warning: App may not be fully portable - some dependencies not bundled"
          fi
          
          # Verify executable permissions
          if [ -x "${{ steps.build_info.outputs.app_name }}.app/Contents/MacOS/DroidStar" ]; then
            echo "✅ Executable has proper permissions"
          else
            echo "⚠️ Warning: Executable may not have proper permissions"
          fi
          
          echo "✅ App bundle verification completed successfully"
        else
          echo "❌ Error: Main executable not found"
          exit 1
        fi
    
    - name: Create DMG package
      if: ${{ inputs.create_dmg }}
      working-directory: build
      run: |
        echo "=== Creating DMG package ==="
        if [ "${{ inputs.code_sign }}" = "true" ] && [ -n "${{ secrets.DEVELOPER_ID_APPLICATION }}" ]; then
          macdeployqt "${{ steps.build_info.outputs.app_name }}.app" \
            -dmg \
            -codesign="${{ secrets.DEVELOPER_ID_APPLICATION }}"
        else
          macdeployqt "${{ steps.build_info.outputs.app_name }}.app" -dmg
        fi
        
        # Rename DMG to include build info
        if [ -f "${{ steps.build_info.outputs.app_name }}.dmg" ]; then
          mv "${{ steps.build_info.outputs.app_name }}.dmg" \
             "${{ steps.build_info.outputs.app_name }}_${{ steps.build_info.outputs.build_date }}.dmg"
          echo "DMG created: ${{ steps.build_info.outputs.app_name }}_${{ steps.build_info.outputs.build_date }}.dmg"
          echo "DMG size: $(du -sh ${{ steps.build_info.outputs.app_name }}_${{ steps.build_info.outputs.build_date }}.dmg)"
        fi
    
    - name: Create build summary
      working-directory: build
      run: |
        echo "=== Build Summary ===" > build_summary.txt
        echo "Branch: ${{ steps.build_info.outputs.git_branch }}" >> build_summary.txt
        echo "Commit: ${{ steps.build_info.outputs.git_sha }}" >> build_summary.txt
        echo "Build Type: ${{ env.CMAKE_BUILD_TYPE }}" >> build_summary.txt
        echo "Build Date: ${{ steps.build_info.outputs.build_date }}" >> build_summary.txt
        echo "Qt Version: ${{ env.QT_VERSION }}" >> build_summary.txt
        echo "Architecture: ${{ env.CMAKE_OSX_ARCHITECTURES }}" >> build_summary.txt
        echo "Code Signed: ${{ inputs.code_sign }}" >> build_summary.txt
        echo "DMG Created: ${{ inputs.create_dmg }}" >> build_summary.txt
        echo "" >> build_summary.txt
        echo "=== App Bundle Info ===" >> build_summary.txt
        echo "Size: $(du -sh ${{ steps.build_info.outputs.app_name }}.app)" >> build_summary.txt
        echo "Binary Architecture:" >> build_summary.txt
        file "${{ steps.build_info.outputs.app_name }}.app/Contents/MacOS/DroidStar" >> build_summary.txt
        echo "" >> build_summary.txt
        echo "=== Dependencies ===" >> build_summary.txt
        otool -L "${{ steps.build_info.outputs.app_name }}.app/Contents/MacOS/DroidStar" >> build_summary.txt
        
        cat build_summary.txt
    
    - name: Upload app bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build_info.outputs.app_name }}_app
        path: build/${{ steps.build_info.outputs.app_name }}.app
        retention-days: 30
        compression-level: 6
    
    - name: Upload DMG artifact
      if: ${{ inputs.create_dmg }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build_info.outputs.app_name }}_dmg
        path: build/${{ steps.build_info.outputs.app_name }}_${{ steps.build_info.outputs.build_date }}.dmg
        retention-days: 30
    
    - name: Upload build summary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build_info.outputs.app_name }}_build_summary
        path: build/build_summary.txt
        retention-days: 30
    
    - name: Job summary
      run: |
        echo "## 🚀 macOS Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ steps.build_info.outputs.git_branch }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ steps.build_info.outputs.git_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type:** ${{ env.CMAKE_BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture:** ARM64 (Apple Silicon)" >> $GITHUB_STEP_SUMMARY
        echo "- **Qt Version:** ${{ env.QT_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Signed:** ${{ inputs.code_sign }}" >> $GITHUB_STEP_SUMMARY
        echo "- **DMG Created:** ${{ inputs.create_dmg }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts Generated" >> $GITHUB_STEP_SUMMARY
        echo "- 📱 **App Bundle:** \`${{ steps.build_info.outputs.app_name }}.app\`" >> $GITHUB_STEP_SUMMARY
        if [ "${{ inputs.create_dmg }}" = "true" ]; then
          echo "- 💿 **DMG Package:** \`${{ steps.build_info.outputs.app_name }}_${{ steps.build_info.outputs.build_date }}.dmg\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- 📋 **Build Summary:** \`build_summary.txt\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo "Download the artifacts and:" >> $GITHUB_STEP_SUMMARY
        echo "- **App Bundle:** Extract and run directly or copy to Applications" >> $GITHUB_STEP_SUMMARY
        if [ "${{ inputs.create_dmg }}" = "true" ]; then
          echo "- **DMG:** Mount and drag to Applications folder" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All dependencies are bundled - no additional installation required! 🎉" >> $GITHUB_STEP_SUMMARY